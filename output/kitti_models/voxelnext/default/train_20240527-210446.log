2024-05-27 21:04:46,000   INFO  **********************Start logging**********************
2024-05-27 21:04:46,001   INFO  CUDA_VISIBLE_DEVICES=ALL
2024-05-27 21:04:46,001   INFO  Training in distributed mode : total_batch_size: 4
2024-05-27 21:04:46,001   INFO  cfg_file         cfgs/kitti_models/voxelnext.yaml
2024-05-27 21:04:46,001   INFO  batch_size       4
2024-05-27 21:04:46,001   INFO  epochs           80
2024-05-27 21:04:46,001   INFO  workers          4
2024-05-27 21:04:46,001   INFO  extra_tag        default
2024-05-27 21:04:46,001   INFO  ckpt             None
2024-05-27 21:04:46,001   INFO  pretrained_model None
2024-05-27 21:04:46,001   INFO  launcher         pytorch
2024-05-27 21:04:46,001   INFO  tcp_port         18888
2024-05-27 21:04:46,001   INFO  sync_bn          False
2024-05-27 21:04:46,001   INFO  fix_random_seed  False
2024-05-27 21:04:46,001   INFO  ckpt_save_interval 1
2024-05-27 21:04:46,001   INFO  local_rank       0
2024-05-27 21:04:46,001   INFO  max_ckpt_save_num 30
2024-05-27 21:04:46,001   INFO  merge_all_iters_to_one_epoch False
2024-05-27 21:04:46,001   INFO  set_cfgs         None
2024-05-27 21:04:46,001   INFO  max_waiting_mins 0
2024-05-27 21:04:46,001   INFO  start_epoch      0
2024-05-27 21:04:46,001   INFO  num_epochs_to_eval 0
2024-05-27 21:04:46,001   INFO  save_to_file     False
2024-05-27 21:04:46,001   INFO  use_tqdm_to_record False
2024-05-27 21:04:46,001   INFO  logger_iter_interval 50
2024-05-27 21:04:46,001   INFO  ckpt_save_time_interval 300
2024-05-27 21:04:46,001   INFO  wo_gpu_stat      False
2024-05-27 21:04:46,001   INFO  use_amp          False
2024-05-27 21:04:46,001   INFO  cfg.ROOT_DIR: /home/yumetaka/Projects/VoxelNeXt
2024-05-27 21:04:46,001   INFO  cfg.LOCAL_RANK: 0
2024-05-27 21:04:46,001   INFO  cfg.CLASS_NAMES: ['Car', 'Pedestrian', 'Cyclist']
2024-05-27 21:04:46,001   INFO  ----------- DATA_CONFIG -----------
2024-05-27 21:04:46,001   INFO  cfg.DATA_CONFIG.DATASET: KittiDataset
2024-05-27 21:04:46,001   INFO  cfg.DATA_CONFIG.DATA_PATH: ../data/kitti
2024-05-27 21:04:46,001   INFO  cfg.DATA_CONFIG.POINT_CLOUD_RANGE: [0, -40, -3, 70.4, 40, 1]
2024-05-27 21:04:46,002   INFO  ----------- DATA_SPLIT -----------
2024-05-27 21:04:46,002   INFO  cfg.DATA_CONFIG.DATA_SPLIT.train: train
2024-05-27 21:04:46,002   INFO  cfg.DATA_CONFIG.DATA_SPLIT.test: val
2024-05-27 21:04:46,002   INFO  ----------- INFO_PATH -----------
2024-05-27 21:04:46,002   INFO  cfg.DATA_CONFIG.INFO_PATH.train: ['kitti_infos_train.pkl']
2024-05-27 21:04:46,002   INFO  cfg.DATA_CONFIG.INFO_PATH.test: ['kitti_infos_val.pkl']
2024-05-27 21:04:46,002   INFO  cfg.DATA_CONFIG.GET_ITEM_LIST: ['points']
2024-05-27 21:04:46,002   INFO  cfg.DATA_CONFIG.FOV_POINTS_ONLY: True
2024-05-27 21:04:46,002   INFO  ----------- DATA_AUGMENTOR -----------
2024-05-27 21:04:46,002   INFO  cfg.DATA_CONFIG.DATA_AUGMENTOR.DISABLE_AUG_LIST: ['placeholder']
2024-05-27 21:04:46,002   INFO  cfg.DATA_CONFIG.DATA_AUGMENTOR.AUG_CONFIG_LIST: [{'NAME': 'gt_sampling', 'USE_ROAD_PLANE': True, 'DB_INFO_PATH': ['kitti_dbinfos_train.pkl'], 'PREPARE': {'filter_by_min_points': ['Car:5', 'Pedestrian:5', 'Cyclist:5'], 'filter_by_difficulty': [-1]}, 'SAMPLE_GROUPS': ['Car:15', 'Pedestrian:10', 'Cyclist:10'], 'NUM_POINT_FEATURES': 4, 'DATABASE_WITH_FAKELIDAR': False, 'REMOVE_EXTRA_WIDTH': [0.0, 0.0, 0.0], 'LIMIT_WHOLE_SCENE': False}, {'NAME': 'random_world_flip', 'ALONG_AXIS_LIST': ['x']}, {'NAME': 'random_world_rotation', 'WORLD_ROT_ANGLE': [-0.78539816, 0.78539816]}, {'NAME': 'random_world_scaling', 'WORLD_SCALE_RANGE': [0.95, 1.05]}]
2024-05-27 21:04:46,002   INFO  ----------- POINT_FEATURE_ENCODING -----------
2024-05-27 21:04:46,002   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.encoding_type: absolute_coordinates_encoding
2024-05-27 21:04:46,002   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.used_feature_list: ['x', 'y', 'z', 'intensity']
2024-05-27 21:04:46,002   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.src_feature_list: ['x', 'y', 'z', 'intensity']
2024-05-27 21:04:46,002   INFO  cfg.DATA_CONFIG.DATA_PROCESSOR: [{'NAME': 'mask_points_and_boxes_outside_range', 'REMOVE_OUTSIDE_BOXES': True}, {'NAME': 'shuffle_points', 'SHUFFLE_ENABLED': {'train': True, 'test': False}}, {'NAME': 'transform_points_to_voxels', 'VOXEL_SIZE': [0.05, 0.05, 0.1], 'MAX_POINTS_PER_VOXEL': 5, 'MAX_NUMBER_OF_VOXELS': {'train': 16000, 'test': 40000}}]
2024-05-27 21:04:46,002   INFO  cfg.DATA_CONFIG._BASE_CONFIG_: cfgs/dataset_configs/kitti_dataset.yaml
2024-05-27 21:04:46,002   INFO  ----------- MODEL -----------
2024-05-27 21:04:46,002   INFO  cfg.MODEL.NAME: VoxelNeXt
2024-05-27 21:04:46,002   INFO  ----------- VFE -----------
2024-05-27 21:04:46,002   INFO  cfg.MODEL.VFE.NAME: MeanVFE
2024-05-27 21:04:46,002   INFO  ----------- BACKBONE_3D -----------
2024-05-27 21:04:46,002   INFO  cfg.MODEL.BACKBONE_3D.NAME: VoxelResBackBone8xVoxelNeXt
2024-05-27 21:04:46,002   INFO  ----------- DENSE_HEAD -----------
2024-05-27 21:04:46,002   INFO  cfg.MODEL.DENSE_HEAD.NAME: VoxelNeXtHead
2024-05-27 21:04:46,002   INFO  cfg.MODEL.DENSE_HEAD.CLASS_AGNOSTIC: False
2024-05-27 21:04:46,002   INFO  cfg.MODEL.DENSE_HEAD.INPUT_FEATURES: 128
2024-05-27 21:04:46,002   INFO  cfg.MODEL.DENSE_HEAD.CLASS_NAMES_EACH_HEAD: [['Car', 'Pedestrian', 'Cyclist']]
2024-05-27 21:04:46,002   INFO  cfg.MODEL.DENSE_HEAD.SHARED_CONV_CHANNEL: 128
2024-05-27 21:04:46,002   INFO  cfg.MODEL.DENSE_HEAD.KERNEL_SIZE_HEAD: 1
2024-05-27 21:04:46,002   INFO  cfg.MODEL.DENSE_HEAD.USE_BIAS_BEFORE_NORM: True
2024-05-27 21:04:46,002   INFO  cfg.MODEL.DENSE_HEAD.NUM_HM_CONV: 2
2024-05-27 21:04:46,002   INFO  ----------- SEPARATE_HEAD_CFG -----------
2024-05-27 21:04:46,002   INFO  cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_ORDER: ['center', 'center_z', 'dim', 'rot']
2024-05-27 21:04:46,003   INFO  ----------- HEAD_DICT -----------
2024-05-27 21:04:46,003   INFO  ----------- center -----------
2024-05-27 21:04:46,003   INFO  cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.center.out_channels: 2
2024-05-27 21:04:46,003   INFO  cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.center.num_conv: 2
2024-05-27 21:04:46,003   INFO  ----------- center_z -----------
2024-05-27 21:04:46,003   INFO  cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.center_z.out_channels: 1
2024-05-27 21:04:46,003   INFO  cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.center_z.num_conv: 2
2024-05-27 21:04:46,003   INFO  ----------- dim -----------
2024-05-27 21:04:46,003   INFO  cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.dim.out_channels: 3
2024-05-27 21:04:46,003   INFO  cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.dim.num_conv: 2
2024-05-27 21:04:46,003   INFO  ----------- rot -----------
2024-05-27 21:04:46,003   INFO  cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.rot.out_channels: 2
2024-05-27 21:04:46,003   INFO  cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.rot.num_conv: 2
2024-05-27 21:04:46,003   INFO  ----------- TARGET_ASSIGNER_CONFIG -----------
2024-05-27 21:04:46,003   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.FEATURE_MAP_STRIDE: 8
2024-05-27 21:04:46,003   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.NUM_MAX_OBJS: 500
2024-05-27 21:04:46,003   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.GAUSSIAN_OVERLAP: 0.1
2024-05-27 21:04:46,003   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.MIN_RADIUS: 2
2024-05-27 21:04:46,003   INFO  ----------- LOSS_CONFIG -----------
2024-05-27 21:04:46,003   INFO  ----------- LOSS_WEIGHTS -----------
2024-05-27 21:04:46,003   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.cls_weight: 1.0
2024-05-27 21:04:46,003   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.loc_weight: 1.0
2024-05-27 21:04:46,003   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.code_weights: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
2024-05-27 21:04:46,003   INFO  ----------- POST_PROCESSING -----------
2024-05-27 21:04:46,003   INFO  cfg.MODEL.DENSE_HEAD.POST_PROCESSING.SCORE_THRESH: 0.1
2024-05-27 21:04:46,003   INFO  cfg.MODEL.DENSE_HEAD.POST_PROCESSING.POST_CENTER_LIMIT_RANGE: [0, -40, -3, 70.4, 40, 1]
2024-05-27 21:04:46,003   INFO  cfg.MODEL.DENSE_HEAD.POST_PROCESSING.MAX_OBJ_PER_SAMPLE: 500
2024-05-27 21:04:46,003   INFO  ----------- NMS_CONFIG -----------
2024-05-27 21:04:46,003   INFO  cfg.MODEL.DENSE_HEAD.POST_PROCESSING.NMS_CONFIG.NMS_TYPE: nms_gpu
2024-05-27 21:04:46,003   INFO  cfg.MODEL.DENSE_HEAD.POST_PROCESSING.NMS_CONFIG.NMS_THRESH: 0.1
2024-05-27 21:04:46,003   INFO  cfg.MODEL.DENSE_HEAD.POST_PROCESSING.NMS_CONFIG.NMS_PRE_MAXSIZE: 4096
2024-05-27 21:04:46,003   INFO  cfg.MODEL.DENSE_HEAD.POST_PROCESSING.NMS_CONFIG.NMS_POST_MAXSIZE: 500
2024-05-27 21:04:46,003   INFO  ----------- POST_PROCESSING -----------
2024-05-27 21:04:46,003   INFO  cfg.MODEL.POST_PROCESSING.RECALL_THRESH_LIST: [0.3, 0.5, 0.7]
2024-05-27 21:04:46,004   INFO  cfg.MODEL.POST_PROCESSING.EVAL_METRIC: kitti
2024-05-27 21:04:46,004   INFO  ----------- OPTIMIZATION -----------
2024-05-27 21:04:46,004   INFO  cfg.OPTIMIZATION.BATCH_SIZE_PER_GPU: 4
2024-05-27 21:04:46,004   INFO  cfg.OPTIMIZATION.NUM_EPOCHS: 80
2024-05-27 21:04:46,004   INFO  cfg.OPTIMIZATION.OPTIMIZER: adam_onecycle
2024-05-27 21:04:46,004   INFO  cfg.OPTIMIZATION.LR: 0.01
2024-05-27 21:04:46,004   INFO  cfg.OPTIMIZATION.WEIGHT_DECAY: 0.01
2024-05-27 21:04:46,004   INFO  cfg.OPTIMIZATION.MOMENTUM: 0.9
2024-05-27 21:04:46,004   INFO  cfg.OPTIMIZATION.MOMS: [0.95, 0.85]
2024-05-27 21:04:46,004   INFO  cfg.OPTIMIZATION.PCT_START: 0.4
2024-05-27 21:04:46,004   INFO  cfg.OPTIMIZATION.DIV_FACTOR: 10
2024-05-27 21:04:46,004   INFO  cfg.OPTIMIZATION.DECAY_STEP_LIST: [35, 45]
2024-05-27 21:04:46,004   INFO  cfg.OPTIMIZATION.LR_DECAY: 0.1
2024-05-27 21:04:46,004   INFO  cfg.OPTIMIZATION.LR_CLIP: 1e-07
2024-05-27 21:04:46,004   INFO  cfg.OPTIMIZATION.LR_WARMUP: False
2024-05-27 21:04:46,004   INFO  cfg.OPTIMIZATION.WARMUP_EPOCH: 1
2024-05-27 21:04:46,004   INFO  cfg.OPTIMIZATION.GRAD_NORM_CLIP: 10
2024-05-27 21:04:46,004   INFO  cfg.TAG: voxelnext
2024-05-27 21:04:46,004   INFO  cfg.EXP_GROUP_PATH: kitti_models
2024-05-27 21:04:46,020   INFO  ----------- Create dataloader & network & optimizer -----------
2024-05-27 21:04:46,112   INFO  Database filter by min points Car: 14357 => 13532
2024-05-27 21:04:46,112   INFO  Database filter by min points Pedestrian: 2207 => 2168
2024-05-27 21:04:46,112   INFO  Database filter by min points Cyclist: 734 => 705
2024-05-27 21:04:46,126   INFO  Database filter by difficulty Car: 13532 => 10759
2024-05-27 21:04:46,129   INFO  Database filter by difficulty Pedestrian: 2168 => 2075
2024-05-27 21:04:46,130   INFO  Database filter by difficulty Cyclist: 705 => 581
2024-05-27 21:04:46,134   INFO  Loading KITTI dataset
2024-05-27 21:04:46,208   INFO  Total samples for KITTI dataset: 3712
2024-05-27 21:04:46,493   INFO  ----------- Model VoxelNeXt created, param count: 7453547 -----------
2024-05-27 21:04:46,493   INFO  DistributedDataParallel(
  (module): VoxelNeXt(
    (vfe): MeanVFE()
    (backbone_3d): VoxelResBackBone8xVoxelNeXt(
      (conv_input): SparseSequential(
        (0): SubMConv3d(4, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (conv1): SparseSequential(
        (0): SparseBasicBlock(
          (conv1): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU()
          (conv2): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
        (1): SparseBasicBlock(
          (conv1): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU()
          (conv2): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (conv2): SparseSequential(
        (0): SparseSequential(
          (0): SparseConv3d(16, 32, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SparseBasicBlock(
          (conv1): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU()
          (conv2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
        (2): SparseBasicBlock(
          (conv1): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU()
          (conv2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (conv3): SparseSequential(
        (0): SparseSequential(
          (0): SparseConv3d(32, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SparseBasicBlock(
          (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU()
          (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
        (2): SparseBasicBlock(
          (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU()
          (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (conv4): SparseSequential(
        (0): SparseSequential(
          (0): SparseConv3d(64, 128, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SparseBasicBlock(
          (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU()
          (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
        (2): SparseBasicBlock(
          (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU()
          (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (conv5): SparseSequential(
        (0): SparseSequential(
          (0): SparseConv3d(128, 128, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SparseBasicBlock(
          (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU()
          (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
        (2): SparseBasicBlock(
          (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU()
          (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (conv6): SparseSequential(
        (0): SparseSequential(
          (0): SparseConv3d(128, 128, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU()
        )
        (1): SparseBasicBlock(
          (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU()
          (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
        (2): SparseBasicBlock(
          (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU()
          (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
          (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (conv_out): SparseSequential(
        (0): SparseConv2d(128, 128, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], output_padding=[0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (shared_conv): SparseSequential(
        (0): SubMConv2d(128, 128, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (map_to_bev_module): None
    (pfe): None
    (backbone_2d): None
    (dense_head): VoxelNeXtHead(
      (heads_list): ModuleList(
        (0): SeparateHead(
          (center): Sequential(
            (0): SparseSequential(
              (0): SubMConv2d(128, 128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU()
            )
            (1): SubMConv2d(128, 2, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
          )
          (center_z): Sequential(
            (0): SparseSequential(
              (0): SubMConv2d(128, 128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU()
            )
            (1): SubMConv2d(128, 1, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
          )
          (dim): Sequential(
            (0): SparseSequential(
              (0): SubMConv2d(128, 128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU()
            )
            (1): SubMConv2d(128, 3, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
          )
          (rot): Sequential(
            (0): SparseSequential(
              (0): SubMConv2d(128, 128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU()
            )
            (1): SubMConv2d(128, 2, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
          )
          (hm): Sequential(
            (0): SparseSequential(
              (0): SubMConv2d(128, 128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU()
            )
            (1): SubMConv2d(128, 3, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], output_padding=[0, 0], algo=ConvAlgo.MaskImplicitGemm)
          )
        )
      )
      (hm_loss_func): FocalLossSparse()
      (reg_loss_func): RegLossSparse()
    )
    (point_head): None
    (roi_head): None
  )
)
2024-05-27 21:04:46,495   INFO  **********************Start training kitti_models/voxelnext(default)**********************
